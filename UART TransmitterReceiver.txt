//UART Transmitter/Receiver
//UART Transmitter with Baud Rate code 
module uart_tx #(
    parameter CLK_FREQ = 1_000_000,   // 1 MHz system clock
    parameter BAUD_RATE = 9600
)(
    input wire clk,
    input wire rst,
    input wire tx_start,
    input wire [7:0] tx_data,
    output reg tx_busy,
    output reg tx_serial
);

    localparam BIT_PERIOD = CLK_FREQ / BAUD_RATE;

    reg [1:0] state = 0;
    reg [2:0] bit_index = 0;
    reg [15:0] baud_counter = 0;
    reg [7:0] shift_reg = 0;

    localparam IDLE = 2'b00, START = 2'b01, DATA = 2'b10, STOP = 2'b11;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            state <= IDLE;
            tx_serial <= 1'b1;
            tx_busy <= 0;
            bit_index <= 0;
            baud_counter <= 0;
        end else begin
            case (state)
                IDLE: begin
                    tx_serial <= 1'b1;
                    tx_busy <= 0;
                    baud_counter <= 0;
                    if (tx_start) begin
                        shift_reg <= tx_data;
                        tx_busy <= 1;
                        state <= START;
                    end
                end
                START: begin
                    tx_serial <= 0;
                    if (baud_counter < BIT_PERIOD - 1)
                        baud_counter <= baud_counter + 1;
                    else begin
                        baud_counter <= 0;
                        state <= DATA;
                        bit_index <= 0;
                    end
                end
                DATA: begin
                    tx_serial <= shift_reg[bit_index];
                    if (baud_counter < BIT_PERIOD - 1)
                        baud_counter <= baud_counter + 1;
                    else begin
                        baud_counter <= 0;
                        if (bit_index == 7)
                            state <= STOP;
                        else
                            bit_index <= bit_index + 1;
                    end
                end
                STOP: begin
                    tx_serial <= 1;
                    if (baud_counter < BIT_PERIOD - 1)
                        baud_counter <= baud_counter + 1;
                    else begin
                        baud_counter <= 0;
                        state <= IDLE;
                        tx_busy <= 0;
                    end
                end
            endcase
        end
    end
endmodule

//UART Receiver with Baud Rate code 
module uart_rx #(
    parameter CLK_FREQ = 1_000_000,   // 1 MHz system clock
    parameter BAUD_RATE = 9600
)(
    input wire clk,
    input wire rst,
    input wire rx_serial,
    output reg [7:0] rx_data,
    output reg rx_done
);

    localparam BIT_PERIOD = CLK_FREQ / BAUD_RATE;

    reg [1:0] state = 0;
    reg [2:0] bit_index = 0;
    reg [15:0] baud_counter = 0;
    reg [7:0] shift_reg = 0;

    localparam IDLE = 2'b00, START = 2'b01, DATA = 2'b10, STOP = 2'b11;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            state <= IDLE;
            rx_done <= 0;
            bit_index <= 0;
            baud_counter <= 0;
        end else begin
            case (state)
                IDLE: begin
                    rx_done <= 0;
                    baud_counter <= 0;
                    if (~rx_serial)
                        state <= START;
                end
                START: begin
                    if (baud_counter < BIT_PERIOD/2 - 1) // sample in middle
                        baud_counter <= baud_counter + 1;
                    else begin
                        baud_counter <= 0;
                        bit_index <= 0;
                        state <= DATA;
                    end
                end
                DATA: begin
                    if (baud_counter < BIT_PERIOD - 1)
                        baud_counter <= baud_counter + 1;
                    else begin
                        baud_counter <= 0;
                        shift_reg[bit_index] <= rx_serial;
                        if (bit_index == 7)
                            state <= STOP;
                        else
                            bit_index <= bit_index + 1;
                    end
                end
                STOP: begin
                    if (baud_counter < BIT_PERIOD - 1)
                        baud_counter <= baud_counter + 1;
                    else begin
                        baud_counter <= 0;
                        rx_data <= shift_reg;
                        rx_done <= 1;
                        state <= IDLE;
                    end
                end
            endcase
        end
    end
endmodule


//testbench
`timescale 1ns/1ps
module tb_uart;

    reg clk = 0;
    reg rst = 1;
    reg tx_start = 0;
    reg [7:0] tx_data = 8'hA5;

    wire tx_serial;
    wire tx_busy;
    wire [7:0] rx_data;
    wire rx_done;

    // Clock generation
    always #0.5 clk = ~clk; // 1 MHz clock -> 1us period

    // Instantiate UART
    uart_tx #(.CLK_FREQ(1_000_000), .BAUD_RATE(9600)) tx (
        .clk(clk), .rst(rst), .tx_start(tx_start), .tx_data(tx_data),
        .tx_busy(tx_busy), .tx_serial(tx_serial)
    );

    uart_rx #(.CLK_FREQ(1_000_000), .BAUD_RATE(9600)) rx (
        .clk(clk), .rst(rst), .rx_serial(tx_serial),
        .rx_data(rx_data), .rx_done(rx_done)
    );

    initial begin
        rst = 1;
        #2 rst = 0;

        #2 tx_start = 1;
        #1 tx_start = 0;

        #200000 $finish;
    end

    initial begin
        $monitor("Time=%0t | TX=%b | RX_DATA=%h | RX_DONE=%b", $time, tx_serial, rx_data, rx_done);
    end
endmodule

